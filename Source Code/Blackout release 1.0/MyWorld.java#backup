import greenfoot.*;  // (World, Actor, GreenfootImage, Greenfoot and MouseInfo)
import java.io.IOException;
/**
 * Write a description of class MyWorld here.
 * 
 * @author (your name) 
 * @version (a version number or a date)
 */
public class MyWorld extends World
{

    /**
     * Constructor for objects of class MyWorld.
     * 
     */
    Player p;
    public static int gamemode=-1;
    public static boolean isPlaying=false,tutorialShown=false,scoreWindowShown=false,shouldResetText=false;
    public int psize=32;
    Generator gen;
    int[][] b;
    static Button[] bt = new Button[5];
    public MyWorld()
    {    

        super(928, 672, 1, false);
        resetStaticVariables();
        Start s = new Start();

            
        


        if(Start.lang ==(-1))
        {
            roLangSelector ro = new roLangSelector();
            enLangSelector en = new enLangSelector();
            addObject(ro,getWidth()/2-80,getHeight()/2); 
            addObject(en,getWidth()/2+80,getHeight()/2);
        }
        addObject(s,getWidth()/2,getHeight()/2);  

    }
    public void act()
    {
        if(Start.lang!=-1&& Start.hasBeenAnimated==false)
        {
            addMenu();
           Start.hasBeenAnimated=true;
        }
        switch (gamemode)
        {
            case 1:
            {
                if (isPlaying == false)
                {
                    isPlaying=true;
                    TAworld w = new TAworld();
                    Greenfoot.setWorld(w);                    
                }
                break;
            }
            case 2:
            {
                if (isPlaying == false)
                {
                    isPlaying=true;
                    PMworld ww = new PMworld(this);
                    Greenfoot.setWorld(ww);
                }
                break;
            }
            case 3:
            {
                if (tutorialShown==false)
                {
                    Tutorial tut = new Tutorial();
                    addObject(tut,getWidth()/2,getHeight()/2);
                    tutorialShown=true;
                }
                break;
            }
            case 4:
            {
                if (scoreWindowShown==false)
                {
                    ScoreWindow sw = new ScoreWindow();
                    addObject(sw,546,359);
                    try
                    {
                        int TAscore = getTAScore();
                        int PMscore = getPMScore();
                        
                         
                            if (Start.lang==0)
                            {
                                if(PMscore!=-1)
                                showText("Best Puzzle Mode time: "+ PMscore +"s",getWidth()/2,getHeight()/2-50);
                                else
                                showText("You have never played Puzzle Mode",getWidth()/2,getHeight()/2-50);
                                if (TAscore!=-1)
                                showText("Highest Time Attack level reached: " + TAscore,getWidth()/2,getHeight()/2);
                                else
                                showText("You have never played Time Attack Mode",getWidth()/2,getHeight()/2);
                            }
                            else
                            {
                                if(PMscore!=-1)
                                    showText("Cel mai bun timp in Modul Puzzle: "+ PMscore +"s",getWidth()/2,getHeight()/2-50);
                                else
                                    showText("Nu ai jucat niciodata Modul Puzzle",getWidth()/2,getHeight()/2-50);
                                if (TAscore!=-1)
                                    showText("Nivelul maxim atins in Modul Contra Timp: " + TAscore,getWidth()/2,getHeight()/2);
                                else
                                    showText("Nu ai jucat niciodata Modul Contra Timp",getWidth()/2,getHeight()/2);                            
                            }
                       

                        
                        scoreWindowShown=true;
                    } catch (IOException ex) { }
                }
            }
        }
        if (shouldResetText==true)
        {
            showText(" ",getWidth()/2,getHeight()/2-50);   
            showText(" ",getWidth()/2,getHeight()/2);
            shouldResetText=false;
        }        

        
    }
    void addMenu()
    {
        MenuLogo ml = new MenuLogo();
        addObject(ml,552,115);
        for(int i=0;i<4;i++)
            {
            //   if (i%160 
               bt[i] = new Button(i,Start.lang);
               
               addObject(bt[i],542,600+100*i);

            }
    }
    static void resetStaticVariables()
    {
            Start.lang=-1;
        MyWorld.gamemode=-1;
        isPlaying=false;
        Player.canMove=true;
        Start.hasBeenAnimated=false;
        for(int i=0;i<4;i++)
            ItemCounter.gems_taken[i]=0;
        ItemCounter.pillTimer=100;
        ItemCounter.shouldCountdownPill=false;
        FOV.SwitchImage=false;
        TAworld.shouldRegen=false;
        PMworld.shouldShowVictoryWindow=false;
        PMworld.VictoryWindowShown=false;
        TAworld.remainingTime=1500;
        TAworld.victoryWindowShown=false;
        tutorialShown=false;
        scoreWindowShown=false;
        shouldResetText=false; 
    }
    int getTAScore() throws IOException 
    {
        String line;
        ReadFile file = new ReadFile("TAscore.txt");
        line = file.OpenFile();
        if(Integer.valueOf(line) == 0)
            return -1;
        return Integer.valueOf(line);
    }
    int getPMScore() throws IOException
    {
        String line;
        ReadFile file = new ReadFile("PMscore.txt");
        line = file.OpenFile();
        if(Integer.valueOf(line) == 999999)
            return -1;
        return Integer.valueOf(line);
    }    
    
}


